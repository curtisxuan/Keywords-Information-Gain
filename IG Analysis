{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reading each article"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "567886\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "def entropy(p):\n",
    "#     print(p)\n",
    "    if p==1 or p==0:\n",
    "        return 0\n",
    "    return -p*math.log(p,2) - (1-p)*math.log(1-p,2)\n",
    "\n",
    "def IG(clicks,nclicks,clicklen,nclicklen,threshold):\n",
    "    words=[]\n",
    "    commonList = clicks.most_common(clicklen)\n",
    "    p = float(clicklen / (clicklen + nclicklen))\n",
    "    entropy1 = entropy(p)\n",
    "    IGs=[]\n",
    "#     print(entropy1)\n",
    "    for i in commonList:\n",
    "        if i[1]<threshold:\n",
    "            break\n",
    "        posKeyword = i[1]\n",
    "        negKeyword = nclicks[i[0]]\n",
    "        words.append(i[0])\n",
    "#         print(posKeyword)\n",
    "#         print(negKeyword)\n",
    "        \n",
    "        pKeyword = (posKeyword+negKeyword)/(clicklen+nclicklen) #probability keyword appears\n",
    "#         print(pKeyword)\n",
    "        entropy2 = pKeyword * entropy(posKeyword/(negKeyword+posKeyword)) + (1-pKeyword) * entropy((clicklen-posKeyword)/(nclicklen+clicklen-negKeyword-posKeyword))\n",
    "        IGs.append(entropy1 - entropy2)\n",
    "    index = sorted(range(len(IGs)), key=lambda k: IGs[k], reverse = True) #sort IG in descending order and give index\n",
    "    orderedwords = [words[x] for x in index] \n",
    "    orderedIGs = [IGs[x] for x in index] \n",
    "\n",
    "    return orderedwords,orderedIGs\n",
    "\n",
    "def PMI(clicks,nclicks,clicklen,topCount):\n",
    "    commonList = clicks.most_common(topCount)\n",
    "    PMIs=[]\n",
    "    for i in commonList:\n",
    "        posKeyword = i[1]\n",
    "        negKeyword = nclicks[i[0]]\n",
    "        PMI = posKeyword / ((posKeyword+negKeyword)*(clicklen))\n",
    "        PMIs.append(PMI)\n",
    "    return PMIs\n",
    "\n",
    "import collections\n",
    "def analyzeUser(clickresult,nclickresult,allClicks,allNclicks,threshold):\n",
    "    result=[]\n",
    "    for index in range(len(allClicks)):\n",
    "        counter1=collections.Counter(clickresult[index])\n",
    "        counter2=collections.Counter(nclickresult[index])\n",
    "        words1,IG1 = IG(counter1,counter2,len(allClicks[index]),len(allNclicks[index]), threshold)\n",
    "        words2,IG2 = IG(counter2,counter1,len(allNclicks[index]),len(allClicks[index]), threshold)\n",
    "        len1 = len(words1)\n",
    "        len2 = len(words2)\n",
    "        i=0\n",
    "        j=0\n",
    "        posWords=[]\n",
    "        posIGs=[]\n",
    "        negWords=[]\n",
    "        negIGs=[]\n",
    "        unique = set()\n",
    "        while (i<len1 and j<len2 and (len(posWords)<5 or len(negWords)<5)):\n",
    "            if IG1[i] >= IG2[j]:\n",
    "                if words1[i] in unique:\n",
    "                    i+=1\n",
    "                    continue\n",
    "                unique.add(words1[i])\n",
    "                if counter1[words1[i]] > counter2[words1[i]]:\n",
    "                    if len(posWords)==5:\n",
    "                        i+=1\n",
    "                        continue\n",
    "                    posWords.append(words1[i])\n",
    "                    posIGs.append(IG1[i])\n",
    "                else:\n",
    "                    if len(negWords)==5:\n",
    "                        i+=1\n",
    "                        continue\n",
    "                    negWords.append(words1[i])\n",
    "                    negIGs.append(IG1[i])\n",
    "                i+=1\n",
    "            else:\n",
    "                if words2[j] in unique:\n",
    "                    j+=1\n",
    "                    continue\n",
    "                unique.add(words2[j])\n",
    "                if counter1[words2[j]] > counter2[words2[j]]:\n",
    "                    if len(posWords)==5:\n",
    "                        i+=1\n",
    "                    posWords.append(words2[j])\n",
    "                    posIGs.append(IG2[j])\n",
    "                else:\n",
    "                    if len(negWords)==5:\n",
    "                        i+=1\n",
    "                        continue\n",
    "                    negWords.append(words2[j])\n",
    "                    negIGs.append(IG2[j])\n",
    "                j+=1\n",
    "        result.append([posWords,posIGs,negWords,negIGs])\n",
    "    return result\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import ast\n",
    "ct=0\n",
    "aid2ct = {}\n",
    "with open('./documents.json') as f:\n",
    "    for line in f:\n",
    "        article=ast.literal_eval(line)\n",
    "        aid2ct[article['_id']] = ct\n",
    "        ct+=1\n",
    "print(ct)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reading through users"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [],
   "source": [
    "import ast\n",
    "ct=0\n",
    "allClicks=[]\n",
    "allNclicks=[]\n",
    "users=[]\n",
    "with open('./user-clicks-nclicks.json') as f:\n",
    "    for line in f:\n",
    "        user=ast.literal_eval(line)\n",
    "        uid = user['userid']\n",
    "        users.append(uid)\n",
    "        clicks = user['clicks']\n",
    "        nclicks = user['nclicks']\n",
    "        userclicks=[]\n",
    "        for i in clicks:\n",
    "            userclicks.append(aid2ct[i])\n",
    "        clickset = set(userclicks)\n",
    "        usernclicks=[]\n",
    "        for i in nclicks:\n",
    "            if aid2ct[i] in clickset:\n",
    "                continue\n",
    "            usernclicks.append(aid2ct[i])\n",
    "        userclicks.sort()\n",
    "        usernclicks.sort()\n",
    "        allClicks.append(userclicks)\n",
    "        allNclicks.append(usernclicks)\n",
    "#         print(userclicks)\n",
    "#         print(usernclicks)\n",
    "#         print(user['userid'])\n",
    "#         print(user['clicks'])\n",
    "#         print(user['nclicks'])\n",
    "        ct+=1\n",
    "        if ct==100:\n",
    "            break\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Iterate articles and extract ones user clicked/nclicked"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "564305\n",
      "566450\n",
      "564547\n",
      "548427\n",
      "567096\n",
      "567039\n",
      "562706\n",
      "563903\n",
      "564305\n",
      "567039\n",
      "567096\n",
      "567039\n",
      "557444\n",
      "567002\n",
      "567064\n",
      "563340\n",
      "564560\n",
      "562201\n",
      "565657\n",
      "557705\n",
      "567859\n",
      "561435\n",
      "564110\n",
      "567535\n",
      "567107\n",
      "567096\n",
      "563178\n",
      "566201\n",
      "566980\n",
      "567039\n",
      "566856\n",
      "563031\n",
      "561008\n",
      "561204\n",
      "565322\n",
      "562923\n",
      "564110\n",
      "566980\n",
      "564101\n",
      "564110\n",
      "564110\n",
      "567039\n",
      "567039\n",
      "565857\n",
      "567260\n",
      "566705\n",
      "567096\n",
      "561435\n",
      "567792\n",
      "566439\n",
      "558676\n",
      "561203\n",
      "559903\n",
      "564601\n",
      "567039\n",
      "567039\n",
      "563309\n",
      "567039\n",
      "566702\n",
      "567002\n",
      "567096\n",
      "566674\n",
      "557253\n",
      "561435\n",
      "567039\n",
      "567096\n",
      "566980\n",
      "561232\n",
      "567096\n",
      "551565\n",
      "567039\n",
      "563903\n",
      "558108\n",
      "567269\n",
      "567039\n",
      "567039\n",
      "563902\n",
      "567303\n",
      "564946\n",
      "567039\n",
      "563804\n",
      "567102\n",
      "567096\n",
      "567002\n",
      "564110\n",
      "555280\n",
      "556617\n",
      "566702\n",
      "563178\n",
      "561297\n",
      "567840\n",
      "561008\n",
      "567096\n",
      "567489\n",
      "564305\n",
      "566518\n",
      "563309\n",
      "567069\n",
      "559601\n",
      "564619\n"
     ]
    }
   ],
   "source": [
    "import ast\n",
    "clickresult1=[[] for x in range(len(allClicks))]\n",
    "nclickresult1=[[] for x in range(len(allNclicks))]\n",
    "clickresult2=[[] for x in range(len(allClicks))]\n",
    "nclickresult2=[[] for x in range(len(allNclicks))]\n",
    "for userct in range(len(allClicks)):\n",
    "    ct=0\n",
    "    i=0\n",
    "    j=0\n",
    "    numClicks = len(allClicks[userct]) #one particular user's number of clicks\n",
    "    numNclicks = len(allNclicks[userct]) #one particular user's number of nclicks\n",
    "    with open('./documents.json') as f:\n",
    "        for line in f:\n",
    "            if i < numClicks and ct==allClicks[userct][i]:\n",
    "                article=ast.literal_eval(line)\n",
    "#                 aid = article['_id']\n",
    "#                 title = article['stitle']\n",
    "#                 domain = article['domain']\n",
    "                keywords = article['kws']\n",
    "                categories = article['cat']\n",
    "                try:\n",
    "                    categories += article['text_cat_class']\n",
    "                except:\n",
    "                    pass\n",
    "                clickresult1[userct].extend(keywords)\n",
    "                for kek in categories:\n",
    "                    if kek.startswith('poi_'):\n",
    "                        clickresult2[userct].append(kek)\n",
    "                i+=1\n",
    "            if j < numNclicks and ct==allNclicks[userct][j]:\n",
    "                article=ast.literal_eval(line)\n",
    "#                 aid = article['_id']\n",
    "#                 title = article['stitle']\n",
    "#                 domain = article['domain']\n",
    "                keywords = article['kws']\n",
    "                categories = article['cat'] \n",
    "                try:\n",
    "                    categories += article['text_cat_class']\n",
    "                except:\n",
    "                    pass\n",
    "                nclickresult1[userct].extend(keywords)\n",
    "                for kek in categories:\n",
    "                    if kek.startswith('poi_'):\n",
    "                        nclickresult2[userct].append(kek)\n",
    "                j+=1\n",
    "            ct+=1\n",
    "            \n",
    "            if i==numClicks and j==numNclicks:\n",
    "#                 print(ct)\n",
    "                break\n",
    "print('done')\n",
    "            \n",
    "    #         print(article['_id'])\n",
    "    #         print(article['stitle']) #string\n",
    "    #         print(article['domain']) #string\n",
    "    #         print(article['kws']) #list\n",
    "    #         print(article['cat']) #list\n",
    "    #         print(article['text_cat_class']) #list\n",
    "    #         if ct==5:\n",
    "    #             break\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67\n"
     ]
    }
   ],
   "source": [
    "kwResult = analyzeUser(clickresult1,nclickresult1,allClicks,allNclicks,5)\n",
    "poiResult = analyzeUser(clickresult2,nclickresult2,allClicks,allNclicks, 2)\n",
    "profiles=[]\n",
    "for i in range(len(kwResult)):\n",
    "    profile = {'userid':users[i],'pos_pois':poiResult[i][0],'neg_pois':poiResult[i][2],'pos_keywords':kwResult[i][0],'neg_keywords':kwResult[i][2]}\n",
    "    profiles.append(profile)\n",
    "# for i in range(20):\n",
    "#     print(profiles[i])\n",
    "#     print('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "144\n",
      "136\n",
      "Counter({'poi_ppl_donald^^trump': 18, 'poi_ppl_meghan^^markle': 6, 'poi_ppl_ivanka^^trump': 6, 'poi_ppl_prince^^harry': 5, 'poi_ppl_melania^^trump': 5, 'poi_ppl_joe^^biden': 4, 'poi_ppl_alexa^^bliss': 3, 'poi_ppl_angelina^^jolie': 3, 'poi_ppl_hillary^^clinton': 2, 'poi_ppl_jennifer^^aniston': 2, 'poi_ppl_brad^^pitt': 2, 'poi_ppl_stephanie^^mcmahon': 2, 'poi_ppl_kevin^^owens': 2, 'poi_ppl_shane^^mcmahon': 2, 'poi_ppl_ivana^^trump': 2, 'poi_ppl_donald^^trump^^jr': 2, 'poi_ppl_bradley^^cooper': 2, 'poi_ppl_lady^^gaga': 2, 'poi_ppl_john^^cena': 2, 'poi_ppl_michelle^^obama': 2, 'poi_ppl_snoop^^dogg': 2, 'poi_ppl_sam^^nunberg': 1, 'poi_ppl_r^^kelly': 1, 'poi_ppl_ilhan^^omar': 1, 'poi_ppl_chelsea^^clinton': 1, 'poi_ppl_patti^^wood': 1, 'poi_ppl_antonin^^scalia': 1, 'poi_ppl_jesse^^watters': 1, 'poi_ppl_brett^^kavanaugh': 1, 'poi_ppl_william': 1, 'poi_ppl_sandra^^lee': 1, 'poi_ppl_pimple^^popper': 1, 'poi_ppl_rickie^^fowler': 1, 'poi_ppl_tiger^^woods': 1, 'poi_ppl_robert^^mueller': 1, 'poi_ppl_eric^^bischoff': 1, 'poi_ppl_jennifer^^lopez': 1, 'poi_ppl_john^^lewis': 1, 'poi_ppl_ronda^^rousey': 1, 'poi_ppl_julia^^budd': 1, 'poi_ppl_paul^^heyman': 1, 'poi_ppl_eric^^trump': 1, 'poi_ppl_rossano^^rubicondi': 1, 'poi_ppl_jussie^^smollett': 1, 'poi_ppl_nancy^^pelosi': 1, 'poi_ppl_laura^^dern': 1, 'poi_ppl_bully^^ray': 1, 'poi_ppl_nikki^^bella': 1, 'poi_ppl_kane': 1, 'poi_ppl_brooke^^hogan': 1, 'poi_ppl_rihanna': 1, 'poi_ppl_kylie^^jenner': 1, 'poi_ppl_george^^kay': 1, 'poi_ppl_kerry^^katona': 1, 'poi_ppl_kurt^^angle': 1, 'poi_ppl_chad^^gable': 1, 'poi_ppl_shinsuke^^nakamura': 1, 'poi_ppl_daniel^^bryan': 1, 'poi_ppl_drew^^mcintyre': 1, 'poi_ppl_xavier^^woods': 1, 'poi_ppl_aleister^^black': 1, 'poi_ppl_samoa^^joe': 1, 'poi_ppl_kofi^^kingston': 1, 'poi_ppl_dolph^^ziggler': 1, 'poi_ppl_tom^^phillips': 1, 'poi_ppl_gregory^^hines': 1, 'poi_ppl_eiza^^gonzalez': 1, 'poi_ppl_liv^^morgan': 1, 'poi_ppl_50^^cent': 1, 'poi_ppl_robert^^johnson': 1, 'poi_ppl_geraldine^^hart': 1, 'poi_ppl_katie^^holmes': 1, 'poi_ppl_wynonna^^judd': 1, 'poi_ppl_p^^diddy': 1, 'poi_ppl_george^^conway': 1, 'poi_ppl_nipsey^^hussle': 1, 'poi_ppl_john^^mckinney': 1, 'poi_ppl_maria^^bartiromo': 1, 'poi_ppl_barack^^obama': 1, 'poi_ppl_kamala^^harris': 1, 'poi_ppl_elizabeth^^ii': 1, \"poi_ppl_rosie^^o'donnell\": 1, 'poi_ppl_chuck^^schumer': 1, 'poi_ppl_jeffrey^^epstein': 1, 'poi_ppl_lacey^^evans': 1, 'poi_ppl_maria^^martinez': 1, 'poi_ppl_viaan^^raj^^kundra': 1, 'poi_ppl_shilpa^^shetty^^kundra': 1, 'poi_ppl_britney^^spears': 1})\n",
      "\n",
      "151\n",
      "162\n",
      "Counter({'poi_ppl_donald^^trump': 15, 'poi_ppl_meghan^^markle': 7, 'poi_ppl_melania^^trump': 5, 'poi_ppl_kate^^middleton': 4, 'poi_ppl_jeffrey^^epstein': 4, 'poi_ppl_nancy^^pelosi': 4, 'poi_ppl_william': 2, 'poi_ppl_robert^^mueller': 2, 'poi_ppl_katie^^nicholl': 2, 'poi_ppl_brad^^pitt': 2, 'poi_ppl_klay^^thompson': 2, 'poi_ppl_beth^^chapman': 2, 'poi_ppl_paul^^heyman': 2, 'poi_ppl_sean^^hannity': 2, 'poi_ppl_john^^cena': 2, 'poi_ppl_bill^^clinton': 2, 'poi_ppl_ronda^^rousey': 2, 'poi_ppl_sasha^^banks': 2, 'poi_ppl_adam^^schiff': 1, 'poi_ppl_portia^^de^^rossi': 1, 'poi_ppl_ellen^^degeneres': 1, 'poi_ppl_alfredo^^rodriguez': 1, 'poi_ppl_cody^^rhodes': 1, 'poi_ppl_darby^^allin': 1, 'poi_ppl_ivanka^^trump': 1, 'poi_ppl_jennifer^^lopez': 1, 'poi_ppl_harry^^will': 1, 'poi_ppl_melanie^^bromley': 1, 'poi_ppl_jay-z': 1, 'poi_ppl_angelina^^jolie': 1, 'poi_ppl_kevin^^durant': 1, 'poi_ppl_vince^^mcmahon': 1, 'poi_sports_nba_toronto^^raptors': 1, 'poi_sports_nba_los^^angeles^^lakers': 1, 'poi_ppl_kawhi^^leonard': 1, 'poi_ppl_vinnie^^jones': 1, 'poi_ppl_charles^^spencer': 1, 'poi_ppl_prince^^harry': 1, 'poi_ppl_celine^^dion': 1, 'poi_ppl_eric^^bischoff': 1, 'poi_ppl_katie^^holmes': 1, 'poi_ppl_tom^^cruise': 1, 'poi_ppl_blake^^griffin': 1, 'poi_ppl_shakira^^pellow': 1, 'poi_ppl_tori^^spelling': 1, 'poi_ppl_enzo^^amore': 1, 'poi_ppl_joey^^janela': 1, 'poi_ppl_jessica^^sanchez': 1, 'poi_ppl_ted^^cruz': 1, 'poi_ppl_monica^^lewinsky': 1, 'poi_ppl_jeff^^hardy': 1, 'poi_ppl_mitch^^mcconnell': 1, 'poi_ppl_barack^^obama': 1, 'poi_ppl_vladimir^^putin': 1, 'poi_ppl_brock^^lesnar': 1, 'poi_ppl_eddie^^guerrero': 1, 'poi_ppl_vickie^^guerrero': 1, 'poi_ppl_chris^^wallace': 1, 'poi_ppl_stephen^^king': 1, 'poi_ppl_sarah^^ferguson': 1, 'poi_ppl_stephen^^curry': 1, 'poi_ppl_yo^^gotti': 1, 'poi_ppl_demarcus^^cousins': 1, 'poi_ppl_katy^^perry': 1, 'poi_ppl_selena^^gomez': 1, 'poi_ppl_michael^^blackson': 1, 'poi_ppl_andy^^spade': 1, 'poi_ppl_kate^^spade': 1, 'poi_ppl_david^^spade': 1, 'poi_ppl_michelle^^obama': 1, 'poi_ppl_farrah^^abraham': 1, 'poi_ppl_marty^^jannetty': 1, 'poi_ppl_shawn^^michaels': 1, 'poi_ppl_charles': 1, 'poi_ppl_camilla^^parker^^bowles': 1, 'poi_ppl_julia^^roberts': 1, 'poi_ppl_danny^^moder': 1, 'poi_ppl_seth^^macfarlane': 1, 'poi_ppl_fred^^flintstone': 1, 'poi_ppl_50^^cent': 1, 'poi_ppl_james^^clapper': 1, 'poi_ppl_john^^brennan': 1, 'poi_ppl_jim^^comey': 1, 'poi_ppl_thomas^^mcinerney': 1, 'poi_ppl_simon^^konecki': 1, 'poi_ppl_kevin^^gates': 1, 'poi_ppl_loretta^^lynn': 1, 'poi_ppl_arnold^^schwarzenegger': 1, 'poi_ppl_mariah^^carey': 1, 'poi_ppl_tim^^mcgraw': 1, 'poi_ppl_faith^^hill': 1, 'poi_ppl_prince^^louis': 1, 'poi_ppl_ivana^^trump': 1, 'poi_ppl_rossano^^rubicondi': 1, 'poi_ppl_whoopi^^goldberg': 1, 'poi_ppl_luke^^harper': 1, \"poi_ppl_keyshia^^ka'oir\": 1, 'poi_ppl_paul^^manafort': 1, 'poi_ppl_michael^^cohen': 1, 'poi_ppl_kellyanne^^conway': 1, 'poi_ppl_megan^^rapinoe': 1, 'poi_ppl_carrie^^underwood': 1, 'poi_ppl_sarah^^sanders': 1, 'poi_ppl_eric^^trump': 1, 'poi_ppl_stephanie^^wilkinson': 1, 'poi_ppl_trevor^^engelson': 1})\n",
      "\n",
      "poi_ppl_donald^^trump\n"
     ]
    }
   ],
   "source": [
    "import collections\n",
    "index=4\n",
    "counter1=collections.Counter(clickresult2[index])\n",
    "counter2=collections.Counter(nclickresult2[index])\n",
    "\n",
    "print(len(clickresult2[index]))\n",
    "print(len(allClicks[index]))\n",
    "print(counter1)\n",
    "print('')\n",
    "print(len(nclickresult2[index]))\n",
    "print(len(allNclicks[index]))\n",
    "print(counter2)\n",
    "\n",
    "print('')\n",
    "print(counter1.most_common(5)[0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(['poi_ppl_kate^^middleton', 'poi_ppl_melania^^trump', 'poi_ppl_prince^^harry', 'poi_ppl_william', 'poi_ppl_ivanka^^trump', 'poi_ppl_barbara', 'poi_ppl_joe^^biden', 'poi_ppl_donald^^trump', 'poi_ppl_prince^^william', 'poi_ppl_beth^^chapman', 'poi_ppl_robert^^mueller', 'poi_ppl_meghan^^markle'], [0.007337612360791779, 0.0052880403251058805, 0.004608828468278481, 0.004195857362098265, 0.003070088220043843, 0.003070088220043843, 0.0024228523743797803, 0.001104431096629943, 0.0009920762128933225, 0.0009383108903998627, 0.0001373198681392518, 9.038728902777127e-05])\n",
      "(['poi_ppl_jackie^^kennedy', 'poi_ppl_kate^^middleton', 'poi_ppl_prince^^harry', 'poi_ppl_kamala^^harris', 'poi_ppl_donald^^trump', 'poi_ppl_beth^^chapman', 'poi_ppl_robert^^mueller', 'poi_ppl_meghan^^markle', 'poi_ppl_jeffrey^^epstein', 'poi_ppl_nancy^^pelosi', 'poi_ppl_ilhan^^omar', 'poi_ppl_john^^f^^kennedy^^jr'], [0.00904478449372359, 0.007337612360791779, 0.004608828468278481, 0.001226439868312168, 0.001104431096629943, 0.0009383108903997517, 0.0001373198681392518, 9.038728902766024e-05, 6.773682716898488e-05, 6.773682716898488e-05, 6.773682716898488e-05, 6.773682716898488e-05])\n"
     ]
    }
   ],
   "source": [
    "print(IG(counter1,counter2,len(allClicks[index]),len(allNclicks[index]), 3))\n",
    "# print(PMI(counter1,counter2,len(allClicks[index]),5))\n",
    "print(IG(counter2,counter1,len(allNclicks[index]),len(allClicks[index]), 3))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [],
   "source": [
    "words1,IG1 = IG(counter1,counter2,len(allClicks[index]),len(allNclicks[index]), 3)\n",
    "words2,IG2 = IG(counter2,counter1,len(allNclicks[index]),len(allClicks[index]), 3)\n",
    "len1 = len(words1)\n",
    "len2 = len(words2)\n",
    "i=0\n",
    "j=0\n",
    "combWords=[]\n",
    "IGs=[]\n",
    "unique = set()\n",
    "while (i<len1 and j<len2 and i+j<5):\n",
    "    if IG1[i] >= IG2[j]:\n",
    "        if words1[i] in unique:\n",
    "            i+=1\n",
    "            continue\n",
    "        combWords.append(words1[i])\n",
    "        IGs.append(IG1[i])\n",
    "        unique.add(words1[i])\n",
    "        i+=1\n",
    "    else:\n",
    "        if words2[j] in unique:\n",
    "            j+=1\n",
    "            continue\n",
    "        combWords.append(words2[j])\n",
    "        IGs.append(IG2[j])\n",
    "        unique.add(words2[j])\n",
    "        j+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "poi_ppl_jackie^^kennedy\t0.00904478449372359\n",
      "poi_ppl_kate^^middleton\t0.007337612360791779\n",
      "poi_ppl_melania^^trump\t0.0052880403251058805\n",
      "poi_ppl_prince^^harry\t0.004608828468278481\n",
      "poi_ppl_william\t0.004195857362098265\n",
      "poi_ppl_ivanka^^trump\t0.003070088220043843\n",
      "poi_ppl_barbara\t0.003070088220043843\n",
      "poi_ppl_joe^^biden\t0.0024228523743797803\n",
      "poi_ppl_kamala^^harris\t0.001226439868312168\n",
      "poi_ppl_donald^^trump\t0.001104431096629943\n",
      "poi_ppl_prince^^william\t0.0009920762128933225\n",
      "poi_ppl_beth^^chapman\t0.0009383108903998627\n",
      "poi_ppl_robert^^mueller\t0.0001373198681392518\n",
      "poi_ppl_meghan^^markle\t9.038728902777127e-05\n"
     ]
    }
   ],
   "source": [
    "for i in range(len(combWords)):\n",
    "    print(combWords[i] + '\\t' + str(IGs[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
